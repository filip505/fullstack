{"version":3,"sources":["../src/websockets.js"],"names":["WebSockets","WebSocket","Server","constructor","server","connections","on","ws","id","uuid","v1","console","log","message","driverId","filter","push","sendLocation","then","list","drivers","reduce","driver","length","send","JSON","stringify","location","e","item","setTimeout"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,UAAN,SAAyBC,YAAUC,MAAnC,CAA0C;AAGtCC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,UAAMA,MAAN;AADgB,SAFpBC,WAEoB,GAFN,EAEM;AAEhB,SAAKC,EAAL,CAAQ,YAAR,EAAuBC,EAAD,IAAQ;AAC1B,YAAMC,EAAE,GAAGC,cAAKC,EAAL,EAAX;;AACAH,MAAAA,EAAE,CAACC,EAAH,GAAQA,EAAR;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,EAAtB;AACAD,MAAAA,EAAE,CAACD,EAAH,CAAM,SAAN,EAAkBO,OAAD,IAAa;AAC1BF,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BC,OAA5B;AACAN,QAAAA,EAAE,CAACO,QAAH,GAAcD,OAAd;AACH,OAHD;AAIAN,MAAAA,EAAE,CAACD,EAAH,CAAM,OAAN,EAAe,MAAM;AAEjB,aAAKD,WAAL,GAAmB,KAAKA,WAAL,CAAiBU,MAAjB,CAAwBR,EAAE,IAAI;AAACI,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,EAAE,CAACC,EAA/B,EAAmCA,EAAnC;AAAwC,iBAAOD,EAAE,CAACC,EAAH,KAAUA,EAAjB;AAAoB,SAA3F,CAAnB;AACH,OAHD;AAIA,WAAKH,WAAL,CAAiBW,IAAjB,CAAsBT,EAAtB;AACH,KAbD;AAcA,SAAKU,YAAL;AACH;;AAEDA,EAAAA,YAAY,GAAG;AACX,0BAAaC,IAAb,CAAkBC,IAAI,IAAI;AACtB,YAAMC,OAAO,GAAGD,IAAI,CAACE,MAAL,CAAY,CAACD,OAAD,EAAUE,MAAV,KAAqB;AAAEF,QAAAA,OAAO,CAACE,MAAM,CAACd,EAAR,CAAP,GAAqBc,MAArB;AAA6B,eAAOF,OAAP;AAAgB,OAAhF,EAAkF,EAAlF,CAAhB;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B,KAAKP,WAAL,CAAiBkB,MAAhD;;AACA,WAAK,IAAIhB,EAAT,IAAe,KAAKF,WAApB,EAAiC;AAC7B,YAAI;AACAE,UAAAA,EAAE,CAACiB,IAAH,CAAQC,IAAI,CAACC,SAAL,CAAeN,OAAO,CAACb,EAAE,CAACO,QAAJ,CAAP,CAAqBa,QAApC,CAAR;AACH,SAFD,CAEC,OAAMC,CAAN,EAAS;AACN,eAAKvB,WAAL,GAAmB,KAAKA,WAAL,CAAiBU,MAAjB,CAAwBc,IAAI,IAAItB,EAAE,CAACC,EAAH,KAAUqB,IAAI,CAACrB,EAA/C,CAAnB;AACH;AACJ;;AACDsB,MAAAA,UAAU,CAAC,MAAM,KAAKb,YAAL,EAAP,EAA4B,IAA5B,CAAV;AACH,KAXD;AAYH;;AAnCqC;;eAsC3BjB,U","sourcesContent":["import WebSocket from 'ws'\nimport uuid from 'uuid'\nimport { getDrivers } from './database/db';\n\nclass WebSockets extends WebSocket.Server {\n    connections = []\n\n    constructor(server) {\n        super(server)\n        this.on('connection', (ws) => {\n            const id = uuid.v1()\n            ws.id = id\n            console.log('IDIDID', id)\n            ws.on('message', (message) => {\n                console.log('received: %s', message);\n                ws.driverId = message\n            });\n            ws.on('close', () => {\n                \n                this.connections = this.connections.filter(ws => {console.log('disconnected', ws.id, id); return ws.id !== id})\n            });\n            this.connections.push(ws)\n        });\n        this.sendLocation()\n    }\n\n    sendLocation() {\n        getDrivers().then(list => {\n            const drivers = list.reduce((drivers, driver) => { drivers[driver.id] = driver; return drivers }, {})\n            console.log('connection size', this.connections.length)\n            for (let ws of this.connections) {\n                try {\n                    ws.send(JSON.stringify(drivers[ws.driverId].location))\n                }catch(e) {\n                    this.connections = this.connections.filter(item => ws.id === item.id)\n                }\n            }\n            setTimeout(() => this.sendLocation(), 1000)\n        })\n    }\n}\n\nexport default WebSockets\n\n\n\n\n"],"file":"websockets.js"}